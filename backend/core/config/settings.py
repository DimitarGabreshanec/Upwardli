"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

import boto3
from botocore.config import Config as BotoConfig

# Application definition
# pylint: disable=wildcard-import, unused-wildcard-import
from .apps import *

# Staticfiles handling definition
from .static import *

boto_config = BotoConfig(connect_timeout=1, read_timeout=1)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BASE_URL = "core/"

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-dkn^jm40n8zzn%*j%9(d*wgzd!u(!!(py#1^80me-b$xe&aov+"
HASHIDS_SALT = "PKRxCDcftTQpKmjZRxvS"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DEBUG"))
if os.environ.get("LAMBDA"):
    secrets_client = boto3.client("secretsmanager", config=boto_config)

    def get_secret(secret_arn: str) -> str:
        """Return secrets manager secret via secret store ARN"""
        return str(secrets_client.get_secret_value(SecretId=secret_arn)["SecretString"])

    DEBUG = False
    SECRET_KEY = get_secret(os.environ["DJANGO_SECRET_KEY_ARN"])

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    # development
    os.environ.get("REACT_NATIVE_PACKAGER_HOSTNAME"),
    "upwardli.local",
    "backend",
    # staging (dev-core lambda)
    "h2qyn4sxni.execute-api.us-east-2.amazonaws.com",
    # production
    "v7wtgj57ji.execute-api.us-east-2.amazonaws.com",
    # production & staging
    ".upwardli.com",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "users.middleware.JWTAuthenticationMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Rest framework
REST_FRAMEWORK = {
    "PAGE_SIZE": 20,
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.AllowAny",),
    "DATETIME_FORMAT": "%Y-%m-%dT%H:%M:%S.%fZ",
    "DATETIME_INPUT_FORMATS": "%Y-%m-%dT%H:%M:%S.%fZ",
    "DATE_FORMAT": "%d-%m-%Y",
    "DEFAULT_FILTER_BACKENDS": ("rest_framework.filters.SearchFilter",),
    "DEFAULT_PARSER_CLASSES": (
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ),
    "DEFAULT_THROTTLE_CLASSES": (
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ),
}


SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Basic": {"type": "basic"},
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": 'Input format: "Bearer your_jwt_token....."',
            "token_type": "JWT",
        },
    },
    "DEFAULT_INFO": "config.urls.api_info",
}

# Django Rest Auth
REST_USE_JWT = True
JWT_AUTH_COOKIE = "jwt-auth"

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
}

# django-allauth
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = "email"

# WSGI runtime
WSGI_APPLICATION = "config.wsgi.application"

# SQLITE=1 is used when running tests to enable single process tests
# without running a multi-container setup.
if os.environ.get("SQLITE"):
    import tempfile

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(tempfile.gettempdir(), "test.sqlite"),
        }
    }
elif os.environ.get("LAMBDA"):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": os.environ["MYSQL_DATABASE"],
            "HOST": os.environ["MYSQL_HOST"],
            "USER": os.environ["MYSQL_USER"],
            "PASSWORD": get_secret(os.environ["MYSQL_PASSWORD_SECRET_ARN"]),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": os.environ["MYSQL_DATABASE"],
            "HOST": os.environ["MYSQL_HOST"],
            "USER": os.environ["MYSQL_USER"],
            "PASSWORD": os.environ["MYSQL_PASSWORD"],
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


MEDIA_URL = BASE_URL + "media/"
MEDIA_ROOT = os.path.join(os.path.abspath(BASE_DIR), "media")

USE_X_FORWARDED_HOST = True

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Defines site Id, required by django registration
# https://docs.djangoproject.com/en/dev/ref/contrib/sites/

SITE_ID = 1

# DEBUG: Temporary solution to STMP email client
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# Set Upwardli user as project user
AUTH_USER_MODEL = "users.UpwardliUser"

REST_AUTH_SERIALIZERS = {
    "USER_DETAILS_SERIALIZER": "users.serializers.CustomUserDetailsSerializer"
}

SOCIALACCOUNT_PROVIDERS = {
    "apple": {
        "APP": {
            # Your service identifier.
            "client_id": os.environ.get("APPLE_CLIENT_ID"),
            # The Key ID (visible in the "View Key Details" page).
            "secret": os.environ.get("APPLE_SECRET"),
            # Member ID/App ID Prefix -- you can find it below your name
            # at the top right corner of the page, or itâ€™s your App ID
            # Prefix in your App ID.
            "key": os.environ.get("APPLE_KEY"),
            # The certificate you downloaded when generating the key.
            # "certificate_key": """-----BEGIN PRIVATE KEY-----
            # s3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr
            # 3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3cr3ts3
            # c3ts3cr3t
            # -----END PRIVATE KEY-----
            # """
            "certificate_key": os.environ.get("APPLE_CERTIFICATE_KEY"),
        }
    }
}

# Get Mapbox Access Token https://account.mapbox.com/
MAPBOX_PUBLIC_API_KEY = os.environ.get("MAPBOX_PUBLIC_API_KEY")

JSON_EDITOR_JS = "https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/8.6.4/jsoneditor.js"
JSON_EDITOR_CSS = (
    "https://cdnjs.cloudflare.com/ajax/libs/jsoneditor/8.6.4/jsoneditor.css"
)
